{"name":"eventor","description":"提供基本的事件添加、移除和触发功能。","keywords":["infrastructure"],"homepage":"http://aralejs.org/events/","author":"玉伯 <lifesinger@gmail.com>","maintainers":["玉伯 <lifesinger@gmail.com>","贯高 <sakura9515@gmail.com>"],"repository":{"type":"git","url":"https://github.com/aralejs/events.git"},"owners":["airyland"],"packages":{"0.0.1":{"name":"eventor","version":"0.0.1","description":"提供基本的事件添加、移除和触发功能。","keywords":["infrastructure"],"homepage":"http://aralejs.org/events/","author":"玉伯 <lifesinger@gmail.com>","maintainers":["玉伯 <lifesinger@gmail.com>","贯高 <sakura9515@gmail.com>"],"repository":{"type":"git","url":"https://github.com/aralejs/events.git"},"bugs":{"url":"https://github.com/aralejs/events/issues"},"licenses":"MIT","spm":{"main":"events.js","dependencies":{"arale-events":"1.2.0"},"devDependencies":{"expect.js":"0.3.1","sinon":"1.6.0"},"engines":{"seajs":"2.2.1"},"tests":"tests/*.js"},"dependencies":["arale-events@1.2.0"],"readme":"# Eventor\r\n\r\n---\r\n\r\n[![spm package](http://spmjs.io/badge/arale-events)](http://spmjs.io/package/arale-events)\r\n[![Build Status](https://travis-ci.org/aralejs/events.png)](https://travis-ci.org/aralejs/events)\r\n[![Coverage Status](https://coveralls.io/repos/aralejs/events/badge.png?branch=master)](https://coveralls.io/r/aralejs/events)\r\n[![Browser compatibility](http://moekit.com/support/ie6+)](#)\r\n\r\n\r\n提供基本的事件添加、移除和触发功能。\r\n\r\n---\r\n\r\n## 使用说明\r\n\r\n使用 `Eventor` 有两种方式，一种是直接实例化：\r\n\r\n```\r\ndefine(function(require) {\r\n    var Events = require('eventor');\r\n\r\n    var object = new Events();\r\n    object.on('expand', function() {\r\n        alert('expanded');\r\n    });\r\n\r\n    object.trigger('expand');\r\n});\r\n```\r\n\r\n另一种是将 `Events` 混入（mix-in）到其他类中：\r\n\r\n```\r\ndefine(function(require) {\r\n    var Events = require('events');\r\n\r\n    function Dog() {\r\n    }\r\n    Events.mixTo(Dog);\r\n\r\n    Dog.prototype.sleep = function() {\r\n        this.trigger('sleep');\r\n    };\r\n\r\n    var dog = new Dog();\r\n    dog.on('sleep', function() {\r\n        alert('狗狗睡得好香呀');\r\n    });\r\n\r\n    dog.sleep();\r\n});\r\n```\r\n\r\n上面的例子已经展现了 `on`, `trigger` `mixTo` 等方法的基本用法，下面详细阐述所有 API 。\r\n\r\n\r\n### on `object.on(event, callback, [context])`\r\n\r\n给对象添加事件回调函数。\r\n\r\n可以传入第三个参数 `context` 来改变回调函数调用时的 `this` 值：\r\n\r\n```\r\npost.on('saved', callback, that);\r\n```\r\n\r\n**注意**：`event` 参数有个特殊取值：`all` 对象上触发任何事件，都会触发 `all`\r\n事件的回调函数，传给 `all` 事件回调函数的第一个参数是事件名。例如，下面的代码可以将一个对象上的所有事件代理到另一个对象上：\r\n\r\n```\r\nproxy.on('all', function(eventName) {\r\n    object.trigger(eventName);\r\n});\r\n```\r\n\r\n### off `object.off([event], [callback], [context])`\r\n\r\n从对象上移除事件回调函数。三个参数都是可选的，当省略某个参数时，表示取该参数的所有值。例子：\r\n\r\n```\r\n// 移除 change 事件上名为 onChange 的回调函数\r\nobject.off('change', onChange);\r\n\r\n// 移除 change 事件的所有回调函数\r\nobject.off('change');\r\n\r\n// 移除所有事件上名为 onChange 的回调函数\r\nobject.off(null, onChange);\r\n\r\n// 移除上下文为 context 的所有事件的所有回调函数\r\nobject.off(null, null, context);\r\n\r\n// 移除 object 对象上所有事件的所有回调函数\r\nobject.off();\r\n```\r\n\r\n\r\n### trigger/emit `object.trigger(event, [*args])`\r\n\r\n触发一个或多个事件（用空格分隔）。`*args` 参数会依次传给回调函数。\r\n\r\n```\r\nobj.on('event', function(arg1, arg2) {\r\n  // your code\r\n});\r\n\r\nobj.trigger('event', arg1, arg2);\r\n```\r\n\r\ntrigger 的返回值是一个布尔值，会根据所有 callback 的执行情况返回。只要有一个 callback 返回 false，trigger 就会返回 false。\r\n\r\n```\r\nobj.on('event', function() {\r\n  // do sth.\r\n});\r\nobj.on('event', function() {\r\n  // do sth.\r\n  return false;\r\n});\r\nobj.on('event', function() {\r\n  // do sth\r\n});\r\n\r\nobj.trigger('event'); // return false\r\n```\r\n\r\n**注意**：`on` 和 `off` 的 `event` 参数也可以表示多个事件（用空格分隔），比如：\r\n\r\n```\r\nvar obj = new Events();\r\n\r\nobj.on('x y', fn);\r\n\r\n// 等价：\r\nobj.on('x').on('y');\r\n```\r\n\r\n\r\n### mixTo `Events.mixTo(receiver)`\r\n\r\n将 `Events` 的原型方法混入到指定对象或函数原型中。\r\n\r\n## 问题讨论\r\n\r\n- handler 的异常处理 https://github.com/aralejs/events/issues/1\r\n\r\n## 性能对比\r\n\r\n- <http://jsperf.com/events-perfs/6>\r\n\r\n**注**：最开始，该模块的主要代码直接来自 Backbone.Events. 后来发现 Backbone\r\n的代码实现有较大的改进空间，因此将内部的数据结构从链表改成了数组，重构后大幅度提升了性能。目前\r\nBackbone 已合并 Arale 的代码：\r\n\r\n- <https://github.com/documentcloud/backbone/pull/1284>\r\n","tag":"stable","publisher":"airyland","md5":"31b0f24daea0d7d72392516e310adc6b","filename":"eventor-0.0.1.tar.gz","created_at":"2014-06-13T10:17:19+08:00","updated_at":"2014-07-18T18:47:08+08:00","dependents":["seedit-user@0.0.6","seedit-loginbox@0.0.7","rater@1.1.2","seedit-login@0.0.7","rater@1.1.3"],"revision":"3b6d76cb8209f321cee03e5fbf03c6a936e3b082"},"0.0.3":{"name":"eventor","version":"0.0.3","description":"提供基本的事件添加、移除和触发功能。","keywords":["infrastructure"],"homepage":"http://aralejs.org/events/","author":"玉伯 <lifesinger@gmail.com>","maintainers":["玉伯 <lifesinger@gmail.com>","贯高 <sakura9515@gmail.com>"],"repository":{"type":"git","url":"https://github.com/aralejs/events.git"},"bugs":{"url":"https://github.com/aralejs/events/issues"},"spm":{"main":"events.js","devDependencies":{"expect.js":"0.3.1","sinon":"1.6.0"},"engines":{"seajs":"2.2.1"}},"dependencies":[],"readme":"# Eventor\r\n\r\n---\r\n\r\n[![spm package](http://spmjs.io/badge/arale-events)](http://spmjs.io/package/arale-events)\r\n[![Build Status](https://travis-ci.org/aralejs/events.png)](https://travis-ci.org/aralejs/events)\r\n[![Coverage Status](https://coveralls.io/repos/aralejs/events/badge.png?branch=master)](https://coveralls.io/r/aralejs/events)\r\n[![Browser compatibility](http://moekit.com/support/ie6+)](#)\r\n\r\n\r\n提供基本的事件添加、移除和触发功能。\r\n\r\n---\r\n\r\n## 使用说明\r\n\r\n使用 `Eventor` 有两种方式，一种是直接实例化：\r\n\r\n```\r\ndefine(function(require) {\r\n    var Events = require('eventor');\r\n\r\n    var object = new Events();\r\n    object.on('expand', function() {\r\n        alert('expanded');\r\n    });\r\n\r\n    object.trigger('expand');\r\n});\r\n```\r\n\r\n另一种是将 `Events` 混入（mix-in）到其他类中：\r\n\r\n```\r\ndefine(function(require) {\r\n    var Events = require('events');\r\n\r\n    function Dog() {\r\n    }\r\n    Events.mixTo(Dog);\r\n\r\n    Dog.prototype.sleep = function() {\r\n        this.trigger('sleep');\r\n    };\r\n\r\n    var dog = new Dog();\r\n    dog.on('sleep', function() {\r\n        alert('狗狗睡得好香呀');\r\n    });\r\n\r\n    dog.sleep();\r\n});\r\n```\r\n\r\n上面的例子已经展现了 `on`, `trigger` `mixTo` 等方法的基本用法，下面详细阐述所有 API 。\r\n\r\n\r\n### on `object.on(event, callback, [context])`\r\n\r\n给对象添加事件回调函数。\r\n\r\n可以传入第三个参数 `context` 来改变回调函数调用时的 `this` 值：\r\n\r\n```\r\npost.on('saved', callback, that);\r\n```\r\n\r\n**注意**：`event` 参数有个特殊取值：`all` 对象上触发任何事件，都会触发 `all`\r\n事件的回调函数，传给 `all` 事件回调函数的第一个参数是事件名。例如，下面的代码可以将一个对象上的所有事件代理到另一个对象上：\r\n\r\n```\r\nproxy.on('all', function(eventName) {\r\n    object.trigger(eventName);\r\n});\r\n```\r\n\r\n### off `object.off([event], [callback], [context])`\r\n\r\n从对象上移除事件回调函数。三个参数都是可选的，当省略某个参数时，表示取该参数的所有值。例子：\r\n\r\n```\r\n// 移除 change 事件上名为 onChange 的回调函数\r\nobject.off('change', onChange);\r\n\r\n// 移除 change 事件的所有回调函数\r\nobject.off('change');\r\n\r\n// 移除所有事件上名为 onChange 的回调函数\r\nobject.off(null, onChange);\r\n\r\n// 移除上下文为 context 的所有事件的所有回调函数\r\nobject.off(null, null, context);\r\n\r\n// 移除 object 对象上所有事件的所有回调函数\r\nobject.off();\r\n```\r\n\r\n\r\n### trigger/emit `object.trigger(event, [*args])`\r\n\r\n触发一个或多个事件（用空格分隔）。`*args` 参数会依次传给回调函数。\r\n\r\n```\r\nobj.on('event', function(arg1, arg2) {\r\n  // your code\r\n});\r\n\r\nobj.trigger('event', arg1, arg2);\r\n```\r\n\r\ntrigger 的返回值是一个布尔值，会根据所有 callback 的执行情况返回。只要有一个 callback 返回 false，trigger 就会返回 false。\r\n\r\n```\r\nobj.on('event', function() {\r\n  // do sth.\r\n});\r\nobj.on('event', function() {\r\n  // do sth.\r\n  return false;\r\n});\r\nobj.on('event', function() {\r\n  // do sth\r\n});\r\n\r\nobj.trigger('event'); // return false\r\n```\r\n\r\n**注意**：`on` 和 `off` 的 `event` 参数也可以表示多个事件（用空格分隔），比如：\r\n\r\n```\r\nvar obj = new Events();\r\n\r\nobj.on('x y', fn);\r\n\r\n// 等价：\r\nobj.on('x').on('y');\r\n```\r\n\r\n\r\n### mixTo `Events.mixTo(receiver)`\r\n\r\n将 `Events` 的原型方法混入到指定对象或函数原型中。\r\n\r\n## 问题讨论\r\n\r\n- handler 的异常处理 https://github.com/aralejs/events/issues/1\r\n\r\n## 性能对比\r\n\r\n- <http://jsperf.com/events-perfs/6>\r\n\r\n**注**：最开始，该模块的主要代码直接来自 Backbone.Events. 后来发现 Backbone\r\n的代码实现有较大的改进空间，因此将内部的数据结构从链表改成了数组，重构后大幅度提升了性能。目前\r\nBackbone 已合并 Arale 的代码：\r\n\r\n- <https://github.com/documentcloud/backbone/pull/1284>\r\n","tag":"stable","revision":"3b6d76cb8209f321cee03e5fbf03c6a936e3b082","publisher":"airyland","md5":"05ceb39ee725250420a9a7e49267ef4e","filename":"eventor-0.0.3.tar.gz","created_at":"2014-07-18T18:56:31+08:00","updated_at":"2015-02-04T15:03:22+08:00","dependents":["rater@1.1.3","seedit-login@0.0.7","smart-nav@0.0.1","pager@1.1.2","seedit-user@0.0.6","arale-dialog@1.4.1","seedit-login@0.0.8","pager@1.1.3","data-saver@0.0.0","seedit-ooxx@0.0.1","opslider@0.0.1","pager@1.1.5"]}},"version":"0.0.3","created_at":"2014-07-18T18:56:31+08:00","updated_at":"2014-07-18T18:56:31+08:00","sync_from_remote":true}