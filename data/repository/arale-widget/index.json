{"name":"arale-widget","description":"Widget 是 UI 组件的基础类，约定了组件的基本生命周期，实现了一些通用功能。基于 Widget 可以构建出任何你想要的 Web 界面组件。","keywords":["infrastructure","ui"],"homepage":"http://aralejs.org/widget/","author":"贯高 <sakura9515@gmail.com>","maintainers":["玉伯 <lifesinger@gmail.com>","贯高 <sakura9515@gmail.com>"],"repository":{"type":"git","url":"https://github.com/aralejs/widget.git"},"owners":["airyland"],"packages":{"1.2.0":{"name":"arale-widget","version":"1.2.0","description":"Widget 是 UI 组件的基础类，约定了组件的基本生命周期，实现了一些通用功能。基于 Widget 可以构建出任何你想要的 Web 界面组件。","keywords":["infrastructure","ui"],"homepage":"http://aralejs.org/widget/","author":"贯高 <sakura9515@gmail.com>","maintainers":["玉伯 <lifesinger@gmail.com>","贯高 <sakura9515@gmail.com>"],"repository":{"type":"git","url":"https://github.com/aralejs/widget.git"},"bugs":{"url":"https://github.com/aralejs/widget/issues"},"spm":{"dependencies":{"jquery":"1.7.2","arale-base":"1.2.0"},"devDependencies":{"expect.js":"0.3.1","sinon":"1.6.0"},"main":"widget.js","buildArgs":"--ignore jquery"},"dependencies":["jquery@1.7.2","arale-base@1.2.0"],"readme":"# Widget \n\n---------\n\n[![spm package](http://spmjs.io/badge/arale-widget)](http://spmjs.io/package/arale-widget)\n[![Build Status](https://travis-ci.org/aralejs/widget.png?branch=master)](https://travis-ci.org/aralejs/widget) [![Coverage Status](https://coveralls.io/repos/aralejs/widget/badge.png?branch=master)](https://coveralls.io/r/aralejs/widget?branch=master)\n\nWidget 是 UI 组件的基础类，约定了组件的基本生命周期，实现了一些通用功能。基于 Widget\n可以构建出任何你想要的 Web 界面组件。\n\n----------\n\n## 使用说明\n\nWidget 继承了 [base](http://aralejs.org/base/)，可使用其中包括 [class](http://aralejs.org/class/)、[events](http://aralejs.org/events/)、[attribute](http://aralejs.org/base/docs/attribute.html)、[aspect](http://aralejs.org/base/docs/aspect.html) 等功能。\n\n### 简单的继承\n\n```js\nvar WidgetA = Widget.extend({\n  attrs: {\n    a: 1\n  },\n\n  method: function() {\n    console.log(this.get('a'));\n  }\n});\n\nvar widget = new WidgetA({\n  a: 2\n}).render();\nwidget.method(); // => 2\n```\n\n### 生命周期\n\nWidget 有一套完整的生命周期，控制着组件从创建到销毁的整个过程。主要有 `initialize`，`render`，`destroy` 三个过程。\n\n#### Initialize\n\nWidget 在实例化的时候会做一系列操作：\n\n```js\n.initAttrs() // 初始化属性，将实例化时的数据和默认属性做混合\n.parseElement() // 模板解析\n.initProps() // 提供给用户处理属性\n.delegateEvents() // 事件代理，将事件代理到 `this.element` 上\n.setup() // 实例化最后一步，用户自定义操作，提供给子类继承。\n```\n\n具体方法的使用可查看 API 文档。\n\n#### Render\n\n将 `this.element` 插入到文档流，默认插入到 document.body，可以通过 parentNode 指定。\n\nRender 这一步操作从 Initialize 中独立出来，因为有些组件在实例化的时候不希望操作 DOM，如果希望实例化的时候处理可在 setup 里调用 `this.render()`。\n\n#### Destroy\n\n组件销毁。将 widget 生成的 element 和事件都销毁。\n\n### 和 Attribute 的关系\n\nWidget 使用了 Attribute，支持 getter/setter，但 Widget 做了一层扩展。\n\n```js\nvar WidgetB = Widget.extend({\n  attrs: {\n    a: 1\n  },\n\n  _onRenderA: function(val) {\n    console.log(val)\n  }\n});\n\nvar widget = new WidgetB();\nwidget.render(); // => 1\nwidget.set('a', 2); // => 2\n```\n\n提供了 `_onRender` + 属性名(首字母大写)的特性，在两种情况会触发\n\n1. 在属性改变的时候\n\n2. 在调用 render 方法的时候(插入文档流之前)，但当属性值为 `null` 或 `undefined` 时则不会触发。\n\n### 模板渲染\n\n每个 Widget 只会对应一个 element，会对他的 DOM 及事件进行操作。\n\nelement 的生成有两种情况\n\n1. 实例化的时候传入\n2. 由 template 生成\n\nWidget 默认处理模板的方式是直接转换成 jQuery 对象，但不能处理数据。涉及到复杂的模板可以覆盖 `parseElementFromTemplate` 方法，可以继承覆盖也可以混入（比如 [templatable](http://aralejs.org/templatable/)）。\n\n### 事件代理\n\n事件代理是 Widget 非常好用的特性，将所有的事件都代理到 `this.element` 上。这样可以使得对应的\nDOM 内容有修改时，无需重新绑定，在 destroy 的时候也会销毁这些事件。\n\n`widget.delegateEvents()` 会在实例初始化时自动调用，这时会从 `this.events` 中取得声明的代理事件，比如\n\n```js\nvar MyWidget = Widget.extend({\n    events: {\n        \"dblclick\": \"open\",\n        \"click .icon.doc\": \"select\",\n        \"mouseover .date\": \"showTooltip\"\n    },\n    open: function() {\n        ...\n    },\n    select: function() {\n        ...\n    },\n    ...\n});\n```\n\n`events` 中每一项的格式是：`\"event selector\": \"callback\"`，当省略 `selector`\n时，默认会将事件绑定到 `this.element` 上。`callback` 可以是字符串，表示当前实例上的方法名；\n也可以直接传入函数。\n\n`events` 还可以是方法，返回一个 events hash 对象即可。比如\n\n```js\nvar MyWidget = Widget.extend({\n    events: function() {\n        var hash = {\n            \"click\": \"open\",\n            \"click .close\": \"close\"\n        };\n\n        return hash;\n    },\n    ...\n});\n```\n\n`events` 中，还支持 `{{name}}` 表达式，比如上面的代码，可以简化为：\n\n```js\nvar MyWidget = Widget.extend({\n    events: {\n        \"click\": \"open\",\n        \"click .close\": \"close\",\n        \"mouseover {{attrs.panels}}\": \"hover\"\n    },\n    ...\n});\n```\n","tag":"stable","revision":"9649043cd7c9a5d2850fd7663f73f26ab461a753","publisher":"airyland","md5":"e8e4a296d70d81e8c558f4ff22cdb534","filename":"arale-widget-1.2.0.tar.gz","created_at":"2014-05-20T17:09:55+08:00","updated_at":"2014-07-06T08:44:00+08:00","dependents":["arale-calendar@1.1.0","calendar@1.1.0","arale-overlay@1.2.0"]}},"version":"1.2.0","created_at":"2014-05-20T17:09:55+08:00","updated_at":"2014-05-20T17:09:55+08:00","sync_from_remote":true}