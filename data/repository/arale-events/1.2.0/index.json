{
  "name": "arale-events",
  "version": "1.2.0",
  "description": "提供基本的事件添加、移除和触发功能。",
  "keywords": [
    "infrastructure"
  ],
  "homepage": "http://aralejs.org/events/",
  "author": "玉伯 <lifesinger@gmail.com>",
  "maintainers": [
    "玉伯 <lifesinger@gmail.com>",
    "贯高 <sakura9515@gmail.com>"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/aralejs/events.git"
  },
  "bugs": {
    "url": "https://github.com/aralejs/events/issues"
  },
  "spm": {
    "main": "events.js",
    "devDependencies": {
      "expect.js": "0.3.1",
      "sinon": "1.6.0"
    }
  },
  "dependencies": [],
  "readme": "# Events\n\n---\n\n[![spm package](http://spmjs.io/badge/arale-events)](http://spmjs.io/package/arale-events)\n[![Build Status](https://travis-ci.org/aralejs/events.png)](https://travis-ci.org/aralejs/events)\n[![Coverage Status](https://coveralls.io/repos/aralejs/events/badge.png?branch=master)](https://coveralls.io/r/aralejs/events)\n\n提供基本的事件添加、移除和触发功能。\n\n---\n\n## 使用说明\n\n使用 `Events` 有两种方式，一种是直接实例化：\n\n```\ndefine(function(require) {\n    var Events = require('events');\n\n    var object = new Events();\n    object.on('expand', function() {\n        alert('expanded');\n    });\n\n    object.trigger('expand');\n});\n```\n\n另一种是将 `Events` 混入（mix-in）到其他类中：\n\n```\ndefine(function(require) {\n    var Events = require('events');\n\n    function Dog() {\n    }\n    Events.mixTo(Dog);\n\n    Dog.prototype.sleep = function() {\n        this.trigger('sleep');\n    };\n\n    var dog = new Dog();\n    dog.on('sleep', function() {\n        alert('狗狗���得好香呀');\n    });\n\n    dog.sleep();\n});\n```\n\n上面的例子已经展现了 `on`, `trigger` `mixTo` 等方法的基本用法，下面详细阐述所有 API 。\n\n\n### on `object.on(event, callback, [context])`\n\n给对象添加事件回调函数。\n\n可以传入第三个参数 `context` 来改变回调函数调用时的 `this` 值：\n\n```\npost.on('saved', callback, that);\n```\n\n**注意**：`event` 参数有个特殊取值：`all` 对象上触发任何事件，都会触发 `all`\n事件的回调函数���传给 `all` 事件回调函数的第一个参数是事件名。例如，下面的代码可以将一个对象上的所有事件代理到另一个对象上：\n\n```\nproxy.on('all', function(eventName) {\n    object.trigger(eventName);\n});\n```\n\n### off `object.off([event], [callback], [context])`\n\n从对象上移除事件回调函数。三个参数都是可选的，当省略某个参数时，表示取该参数的所有值。例子：\n\n```\n// 移除 change 事件上名为 onChange 的回调函数\nobject.off('change', onChange);\n\n// 移除 change 事件的所有回调函数\nobject.off('change');\n\n// 移除所有事件上名为 onChange 的回调函数\nobject.off(null, onChange);\n\n// 移除上下文为 context 的所有事件的所有回调函数\nobject.off(null, null, context);\n\n// 移除 object 对象上所有事件的所有回调函数\nobject.off();\n```\n\n\n### trigger/emit `object.trigger(event, [*args])`\n\n触发一个或多个事件（用空格分隔）。`*args` 参数会依次传给回调函数。\n\n```\nobj.on('event', function(arg1, arg2) {\n  // your code\n});\n\nobj.trigger('event', arg1, arg2);\n```\n\ntrigger 的返回值是一个布尔值，会根据所有 callback 的执行情况返回。只要有一个 callback 返回 false，trigger 就会返回 false。\n\n```\nobj.on('event', function() {\n  // do sth.\n});\nobj.on('event', function() {\n  // do sth.\n  return false;\n});\nobj.on('event', function() {\n  // do sth\n});\n\nobj.trigger('event'); // return false\n```\n\n**注意**：`on` 和 `off` 的 `event` 参数也可以表���多个事件（用空格分隔），比如：\n\n```\nvar obj = new Events();\n\nobj.on('x y', fn);\n\n// 等价：\nobj.on('x').on('y');\n```\n\n\n### mixTo `Events.mixTo(receiver)`\n\n将 `Events` 的原型方法混入到指定对象或函数原型中。\n\n## 问题讨论\n\n- handler 的异常处理 https://github.com/aralejs/events/issues/1\n\n## 性能对比\n\n- <http://jsperf.com/events-perfs/6>\n\n**注**：最开始，该模块的主要代码直接来自 Backbone.Events. 后来发现 Backbone\n的代码实现有较大���改进空间，因此将内部的数据结构从链表改成了数组，重构后大幅度提升了性能。目前\nBackbone 已合并 Arale 的代码：\n\n- <https://github.com/documentcloud/backbone/pull/1284>\n\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/aralejs/events/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n",
  "tag": "stable",
  "revision": "5beeaa48e007f2aa56eb47a9698d21334364b37a",
  "publisher": "airyland",
  "md5": "57aa26437027f3f69a5fb15ed6ab75ca",
  "filename": "arale-events-1.2.0.tar.gz",
  "created_at": "2014-06-07T15:48:08+08:00",
  "updated_at": "2014-09-17T06:15:15+08:00",
  "dependents": [
    "events@1.2.0",
    "eventor@0.0.1",
    "arale-dialog@1.4.0",
    "arale-dialog@1.4.1"
  ]
}